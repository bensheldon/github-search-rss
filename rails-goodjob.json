{
    "version": "https://jsonfeed.org/version/1",
    "title": "rails/rails: Issues containing 'GoodJob'",
    "home_page_url": "https://github.com/search?q=GoodJob+repo%3Arails%2Frails&type=Issues",
    "feed_url": "https://bensheldon.github.io/github-search-rss/rails-goodjob.json",
    "description": "rails/rails: Issues containing 'GoodJob' on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/803765?u=1068ad3fe7323acb63e9fe65e558ba0aabe5d3fe&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I realized that retrying a job from GoodJob would enqueue it in the current locale of the GoodJob dashboard, even if the job was originally enqueued in a different locale.</p>\n<p dir=\"auto\">For instance, it was enqueued in <code class=\"notranslate\">:fr</code>, and failed. When I retried it from the dashboard that was in <code class=\"notranslate\">:en</code>, it was enqueued with an <code class=\"notranslate\">:en</code> locale ( I noticed it because it failed again with a missing translation error)</p>\n<p dir=\"auto\">I tracked it down to the <code class=\"notranslate\">serialize</code> method of <code class=\"notranslate\">ActiveJob</code> who always sets <code class=\"notranslate\">locale</code> from <code class=\"notranslate\">I18n.locale</code></p>\n<p dir=\"auto\">This PR changes the serialize method to actually return the original local from the job if it is set, and default to the current locale if not.</p>",
            "url": "https://github.com/rails/rails/pull/52121",
            "title": "Include the actual ActiveJob locale when serializing rather than I18n locale",
            "date_modified": "2024-06-14T00:53:57.000Z",
            "date_published": "2024-06-13T20:17:11.000Z",
            "author": {
                "name": "Intrepidd",
                "url": "https://github.com/Intrepidd"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/47554?u=7f919feee43d319ec01c7b135f4d1868a31bddc3&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is not a new issue with Rails autoloading, but a challenge I feel when working with Engines (either developing engines as a gem maintainer or consuming engines as an application developer)</p>\n<p dir=\"auto\">For example, an Engine may have a setup like this:</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"module GoodJob\n  class ApplicationJob &lt; ActiveJob::Base\n    # some configuration\n    ActiveSupport.run_load_hooks(:good_job_application_job, self)\n  end\n\n  class UtilityOneJob &lt; ApplicationJob; end\n  class UtilityTwoJob &lt; ApplicationJob; end\n  class UtilityThreeJob &lt; ApplicationJob; end\n  # ... and many more\nend\"><pre class=\"notranslate\"><span class=\"pl-k\">module</span> <span class=\"pl-v\">GoodJob</span>\n  <span class=\"pl-k\">class</span> <span class=\"pl-v\">ApplicationJob</span> &lt; <span class=\"pl-v\">ActiveJob</span>::<span class=\"pl-v\">Base</span>\n    <span class=\"pl-c\"># some configuration</span>\n    <span class=\"pl-v\">ActiveSupport</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">run_load_hooks</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">:good_job_application_job</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">class</span> <span class=\"pl-v\">UtilityOneJob</span> &lt; <span class=\"pl-v\">ApplicationJob</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">class</span> <span class=\"pl-v\">UtilityTwoJob</span> &lt; <span class=\"pl-v\">ApplicationJob</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">class</span> <span class=\"pl-v\">UtilityThreeJob</span> &lt; <span class=\"pl-v\">ApplicationJob</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">end</span>\n  <span class=\"pl-c\"># ... and many more</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p dir=\"auto\">I give an example of GoodJob, but this is a very analogous situation to other Engines with autoloaded classes/subclasses (models, controllers, etc.); for example Devise, which has a <code class=\"notranslate\">DeviseController</code> (with load_hook) that is then subclassed with <a href=\"https://github.com/heartcombo/devise/wiki/How-To:-Create-custom-layouts#application--devise-config\">a desire to extend</a>.</p>\n<p dir=\"auto\">I want to be able to allow application developers to extend the subclasses, and I want to defer autoloaded constants as much as possible (ideally not touching Action Controller or Active Model at all until during initialization), and this seems like it should be reasonable:</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# config/initializers/good_job.rb\n\nActiveSupport.on_load(:good_job_application_job) do\n  # Customize a subclass\n  GoodJob::UtilityJobOne.queue_name = &quot;something_custom&quot;\nend\"><pre class=\"notranslate\"><span class=\"pl-c\"># config/initializers/good_job.rb</span>\n\n<span class=\"pl-v\">ActiveSupport</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">on_load</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">:good_job_application_job</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">do</span>\n  <span class=\"pl-c\"># Customize a subclass</span>\n  <span class=\"pl-v\">GoodJob</span>::<span class=\"pl-v\">UtilityJobOne</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">queue_name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"something_custom\"</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p dir=\"auto\">This <em>usually</em> works ok, except in the case when the <code class=\"notranslate\">UtilityJobOne</code> <em>being loaded causes ApplicationJob to be loaded for the very first time</em>, in which case it raises a <code class=\"notranslate\">uninitialized constant UtilityJobOne (NameError)</code>. This is because of the autoloading chain:</p>\n<p dir=\"auto\"><code class=\"notranslate\">GoodJob::UtilityJobOne</code> first must load its parent class <code class=\"notranslate\">GoodJob::ApplicationJob</code> for the first time, which triggers the load_hook which itself references <code class=\"notranslate\">UtilityOneJob</code> which has not yet completed loading and thus a <code class=\"notranslate\">NameError</code> ðŸ’¥</p>\n<p dir=\"auto\">There is what I consider a workaround for this which is to use <code class=\"notranslate\">inherited</code> (which is triggered _after the subclass constant is loaded), but I find it somewhat complex and wonder if there is a better way, or whether this is something that should be turned into a hook pattern:</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# config/initializers/good_job.rb\n\nmodule ConfigureUtilityJob\n  def inherited(subclass)\n    super\n    if subclass.to_s == &quot;UtilityJobOne&quot;\n      subclass.queue_name = &quot;something_custom&quot;\n    end\n  end\nend\n\nActiveSupport.on_load(:good_job_application_job) do\n  GoodJob::ApplicationJob.extend ConfigureUtilityJob\nend\"><pre class=\"notranslate\"><span class=\"pl-c\"># config/initializers/good_job.rb</span>\n\n<span class=\"pl-k\">module</span> <span class=\"pl-v\">ConfigureUtilityJob</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">inherited</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">subclass</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">super</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-s1\">subclass</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">to_s</span> == <span class=\"pl-s\">\"UtilityJobOne\"</span>\n      <span class=\"pl-s1\">subclass</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">queue_name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"something_custom\"</span>\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-v\">ActiveSupport</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">on_load</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">:good_job_application_job</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">do</span>\n  <span class=\"pl-v\">GoodJob</span>::<span class=\"pl-v\">ApplicationJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">extend</span> <span class=\"pl-v\">ConfigureUtilityJob</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p dir=\"auto\">I realize that another solution as a engine maintainer is to add load hooks to every subclass, but that seems onerous, and as an application developer I'd have to convince other engine maintainers to do so (which is totally ok, so long as there isn't a better way I'm missing or a reasonable central interface for modifying autoloaded subclasses).</p>",
            "url": "https://github.com/rails/rails/issues/51327",
            "title": "Autoloaded classes raise NameError when accessed in parent's on_load hook during load",
            "date_modified": "2024-07-05T18:58:26.000Z",
            "date_published": "2024-03-14T15:06:07.000Z",
            "author": {
                "name": "bensheldon",
                "url": "https://github.com/bensheldon"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/14981592?u=11406fb0121b15a93b3305388377a57b4d9c96f9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Steps to reproduce</h3>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# frozen_string_literal: true\n\nrequire &quot;bundler/inline&quot;\n\ngemfile(true) do\n  source &quot;https://rubygems.org&quot;\n\n  git_source(:github) { |repo| &quot;https://github.com/#{repo}.git&quot; }\n\n  # Activate the gem you are reporting the issue against.\n  gem &quot;rails&quot;, github: &quot;rails/rails&quot;, branch: &quot;main&quot;\n  # gem &quot;rails&quot;, &quot;7.1&quot;\n  gem &quot;sqlite3&quot;, &quot;~&gt; 1.4&quot;\nend\n\nrequire &quot;active_record&quot;\nrequire &quot;minitest/autorun&quot;\nrequire &quot;logger&quot;\n\n# This connection will do for database-independent bug reports.\n# ActiveRecord::Base.establish_connection(adapter: &quot;sqlite3&quot;, database: &quot;:memory:&quot;)\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nclass BugTest &lt; ActiveSupport::TestCase\n  # ActiveRecord::ConnectionNotEstablished: No connection pool for 'ActiveRecord::Base' found.\n  def test_attribute_requires_no_connection\n    assert_nothing_raised do\n      Class.new(ActiveRecord::Base) do\n        attribute :foo, :interval\n      end\n    end\n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-c\"># frozen_string_literal: true</span>\n\n<span class=\"pl-en\">require</span> <span class=\"pl-s\">\"bundler/inline\"</span>\n\n<span class=\"pl-en\">gemfile</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">do</span>\n  <span class=\"pl-en\">source</span> <span class=\"pl-s\">\"https://rubygems.org\"</span>\n\n  <span class=\"pl-en\">git_source</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">:github</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> |<span class=\"pl-s1\">repo</span>| <span class=\"pl-s\">\"https://github.com/<span class=\"pl-s1\"><span class=\"pl-kos\">#{</span><span class=\"pl-s1\">repo</span><span class=\"pl-kos\">}</span></span>.git\"</span> <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-c\"># Activate the gem you are reporting the issue against.</span>\n  <span class=\"pl-en\">gem</span> <span class=\"pl-s\">\"rails\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">github</span>: <span class=\"pl-s\">\"rails/rails\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">branch</span>: <span class=\"pl-s\">\"main\"</span>\n  <span class=\"pl-c\"># gem \"rails\", \"7.1\"</span>\n  <span class=\"pl-en\">gem</span> <span class=\"pl-s\">\"sqlite3\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"~&gt; 1.4\"</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-en\">require</span> <span class=\"pl-s\">\"active_record\"</span>\n<span class=\"pl-en\">require</span> <span class=\"pl-s\">\"minitest/autorun\"</span>\n<span class=\"pl-en\">require</span> <span class=\"pl-s\">\"logger\"</span>\n\n<span class=\"pl-c\"># This connection will do for database-independent bug reports.</span>\n<span class=\"pl-c\"># ActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")</span>\n<span class=\"pl-v\">ActiveRecord</span>::<span class=\"pl-v\">Base</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">logger</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">STDOUT</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">BugTest</span> &lt; <span class=\"pl-v\">ActiveSupport</span>::<span class=\"pl-v\">TestCase</span>\n  <span class=\"pl-c\"># ActiveRecord::ConnectionNotEstablished: No connection pool for 'ActiveRecord::Base' found.</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_attribute_requires_no_connection</span>\n    <span class=\"pl-en\">assert_nothing_raised</span> <span class=\"pl-k\">do</span>\n      <span class=\"pl-v\">Class</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">ActiveRecord</span>::<span class=\"pl-v\">Base</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">do</span>\n        <span class=\"pl-en\">attribute</span> <span class=\"pl-pds\">:foo</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">:interval</span>\n      <span class=\"pl-k\">end</span>\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">It should succeed even when there is no active connection.</p>\n<h3 dir=\"auto\">Actual behavior</h3>\n<p dir=\"auto\">It fails when the connection is not established.</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"798968754\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/41302\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/41302/hovercard\" href=\"https://github.com/rails/rails/pull/41302\">#41302</a> added a test to validate that it works without a connection, however I believe it is currently not checking the right thing: </p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/rails/rails/blob/4fa56814f18fd3da49c83931fa773caa727d8096/activerecord/test/cases/attributes_test.rb#L359-L365\">rails/activerecord/test/cases/attributes_test.rb</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 359 to 365\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/rails/rails/commit/4fa56814f18fd3da49c83931fa773caa727d8096\">4fa5681</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L359\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"359\"></td>\n          <td id=\"LC359\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-en\">test</span> <span class=\"pl-s\">\"attributes do not require a connection is established\"</span> <span class=\"pl-k\">do</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L360\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"360\"></td>\n          <td id=\"LC360\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">assert_not_called</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">ActiveRecord</span>::<span class=\"pl-v\">Base</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">:lease_connection</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">do</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L361\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"361\"></td>\n          <td id=\"LC361\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-v\">Class</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">OverloadedType</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">do</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L362\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"362\"></td>\n          <td id=\"LC362\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-en\">attribute</span> <span class=\"pl-pds\">:foo</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">:string</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L363\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"363\"></td>\n          <td id=\"LC363\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-k\">end</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L364\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"364\"></td>\n          <td id=\"LC364\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">end</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L365\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"365\"></td>\n          <td id=\"LC365\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">end</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">I'd guess it goes through some other thing that requires a connection now instead.</p>\n<p dir=\"auto\">GoodJob added <code class=\"notranslate\">attribute :duration, :interval</code>  to work around a rails 6.1 deprecation warning which resulted in errors for <code class=\"notranslate\">tapioca</code> since it evaluates all code to generate the rbi files. More context at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2398794370\" data-permission-text=\"Title is private\" data-url=\"https://github.com/bensheldon/good_job/issues/1412\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/bensheldon/good_job/pull/1412/hovercard\" href=\"https://github.com/bensheldon/good_job/pull/1412\">bensheldon/good_job#1412</a></p>\n<h3 dir=\"auto\">System configuration</h3>\n<p dir=\"auto\"><strong>Rails version</strong>: main</p>\n<p dir=\"auto\"><strong>Ruby version</strong>: 3.3.4</p>",
            "url": "https://github.com/rails/rails/issues/52311",
            "title": "ActiveRecord `attribute :foo, :bar` requires an active connection",
            "date_modified": "2024-07-11T17:03:53.000Z",
            "date_published": "2024-07-11T17:03:53.000Z",
            "author": {
                "name": "Earlopain",
                "url": "https://github.com/Earlopain"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/545604?u=f4a12e38b365d7686f15e93391b6ffa88c0545cd&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\"><code class=\"notranslate\">jsbundling-rails</code>, <code class=\"notranslate\">cssbundling-rails</code>, and <code class=\"notranslate\">tailwindcss-rails</code> all introduce a new bin/dev and Procfile.dev file to the app when they are installed. This is a good thing as it allows developers to run one command to execute their Rails server and frontend build tools.</p>\n<p dir=\"auto\">However, this change in flow is not very obvious to newcomers or even Rails developers with even moderate experience. Up until this point, they've been told to simply run <code class=\"notranslate\">rails s</code> and they can start developing their app. It's not clear with the introduction of the bundling gems they need to run this separate command to get everything going unless they dig into the gems' README files. They are then left wondering why none of their Javascript or CSS changes are applying because its not obvious they have to run a separate process.</p>\n<p dir=\"auto\">This change introduces <code class=\"notranslate\">bin/dev</code> and <code class=\"notranslate\">Procfile.dev</code> to Rails proper as first class citizens added on the defualt app install - regardless of <code class=\"notranslate\">--javascript</code> or <code class=\"notranslate\">--css</code> flags. A <code class=\"notranslate\">--skip-bin-dev</code> flag was added to not generate those files.</p>\n<p dir=\"auto\"><code class=\"notranslate\">bin/dev</code> is identical to the one found in the bundling gems. Their installers will see the identical file and skip it. <code class=\"notranslate\">Procfile.dev</code> includes only the \"web\" process which is also taken from the bundling gems.</p>\n<p dir=\"auto\">So why even have <code class=\"notranslate\">Procfile.dev</code> if it only has one service in it? If the default workflow of Rails apps going forward uses <code class=\"notranslate\">bin/dev</code> to start/stop the dev stack, this can result in a more smoother transition from importmaps/raw css into the bundling gems as developers would already be using <code class=\"notranslate\">bin/dev</code>. The gems would append to <code class=\"notranslate\">Procfile.dev</code> and no other change would be needed on the developer's part. Also, this allows for other gems such as <code class=\"notranslate\">sidekiq</code>, <code class=\"notranslate\">resque</code>, <code class=\"notranslate\">shackapacker</code>, <code class=\"notranslate\">goodjob</code>, etc (which also need their own separate process while working locally) to slide into the Rails flow easily as one would append a new service to <code class=\"notranslate\">Procfile.dev</code>.</p>\n<h3 dir=\"auto\">Other Information</h3>\n<p dir=\"auto\">Added a changelog entry and did my best to modify some existing guides.</p>",
            "url": "https://github.com/rails/rails/pull/44658",
            "title": "Add bin/dev and Procfile.dev to new Rails apps",
            "date_modified": "2024-05-27T00:25:28.000Z",
            "date_published": "2022-03-10T12:14:17.000Z",
            "author": {
                "name": "t27duck",
                "url": "https://github.com/t27duck"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/4672858?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">At Shopify, we have been using different flavours of concurrency within <code class=\"notranslate\">ActiveJob</code> for several years.<br>\nThis year we have consolidated all of this functionality into one API method called <code class=\"notranslate\">concurrency</code>.<br>\nAfter validating that this works for the scale of Shopify we decided to port the API upstream.</p>\n<p dir=\"auto\">There have been others attempt to add locking to <code class=\"notranslate\">ActiveJob</code> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"354337924\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/33728\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/33728/hovercard\" href=\"https://github.com/rails/rails/pull/33728\">#33728</a></p>\n<p dir=\"auto\">While that functionality has nothing wrong, we have identified that locking is not enough as a concurrency primitive.</p>\n<p dir=\"auto\">At Shopify, we allow developers to specify multiple concurrency options for there jobs:</p>\n<p dir=\"auto\">In all examples below, <code class=\"notranslate\">keys</code> is the array of keys that will help build a unique concurrency key from the job arguments.</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">EndToEnd</code> where a job holds a concurrency ticket from the moment gets enqueue until the job is performed. When any jobs that try to enter the queue, we check if the concurrent limit is reached, and if it is, we drop the job.<br>\n<code class=\"notranslate\">concurrency(limit: 1, keys: ['checkout_id'])</code></li>\n</ul>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class PaymentProcessingJob &lt; ActiveJob\n  # We only allow one job to be in the queue and processing at all times.\n  # If a job tries to enter the queue while another job with the same checkout_id\n  # is in the queue or performing, we drop the new job.\n\n  # Do not want to charge the same checkout twice :)\n  concurrency(limit: 1, keys: ['checkout_id'])\n\n  def perform(params)\n    # Logic\n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">PaymentProcessingJob</span> &lt; <span class=\"pl-v\">ActiveJob</span>\n  <span class=\"pl-c\"># We only allow one job to be in the queue and processing at all times.</span>\n  <span class=\"pl-c\"># If a job tries to enter the queue while another job with the same checkout_id</span>\n  <span class=\"pl-c\"># is in the queue or performing, we drop the new job.</span>\n\n  <span class=\"pl-c\"># Do not want to charge the same checkout twice :)</span>\n  <span class=\"pl-en\">concurrency</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">limit</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">keys</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'checkout_id'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">params</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\"># Logic</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">EnqueueLimit</code> where a job holds a concurrency ticket from the moment gets enqueue until the jobs get dequeued. When any jobs that try to enter the queue, we check if the concurrent limit is reached and if it is, we drop the job.<br>\n<code class=\"notranslate\">concurrency(limit: { enqueue: 1 }, keys: ['checkout_id'])</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">PerformLimit</code> where a job holds a concurrency ticket from the moment gets dequeued until the jobs get performed. At the time of the dequeue, we check if the concurrency limit is reached and if so we put that job back into the Delayed queue<br>\n<code class=\"notranslate\">concurrency(limit: { performed: 1 }, keys: ['checkout_id'])</code></p>\n</li>\n</ul>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class UpdateThemeSettingsReferencesJob &lt; ActiveJob\n  # We only allow one job to perform at any moment. \n  # This is often used as a form of throttling for expensive operations.\n  # When a job from the head of the queue tries to start performing while another job \n  # with the same key is already performing, we re-enqueue the new job with a delay.\n  concurrency(\n    limit: { perform: 1 },\n    keys: ['shop_id', 'model', 'model_id']\n  )\n\n  def perform(params)\n    # Logic \n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">UpdateThemeSettingsReferencesJob</span> &lt; <span class=\"pl-v\">ActiveJob</span>\n  <span class=\"pl-c\"># We only allow one job to perform at any moment. </span>\n  <span class=\"pl-c\"># This is often used as a form of throttling for expensive operations.</span>\n  <span class=\"pl-c\"># When a job from the head of the queue tries to start performing while another job </span>\n  <span class=\"pl-c\"># with the same key is already performing, we re-enqueue the new job with a delay.</span>\n  <span class=\"pl-en\">concurrency</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-pds\">limit</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-pds\">perform</span>: <span class=\"pl-c1\">1</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-pds\">keys</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'shop_id'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'model'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'model_id'</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">params</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\"># Logic </span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">BoundedStages</code> is the combination of <code class=\"notranslate\">EnqueueLimit</code> and <code class=\"notranslate\">PerformLimit</code><br>\n<code class=\"notranslate\">concurrency(limit: { enqueue: 1, perform:1  }, keys: ['checkout_id'])</code></li>\n</ul>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class ExpensiveIdempotentSyncJob &lt; ActiveJob\n  # This job syncs the data of this shop with an external service.\n  # Since it is expensive, we want only one sync running at a time for each shop.\n  # We need to enqueue this job whenever something changes that requires syncing.\n  # However, if there is already an ExpensiveSyncJob in the queue, that job will sync all the changes made\n  # before it starts running, so there is no need to enqueue duplicates.\n  concurrency(limit: { enqueue: 1, perform: 1 }, keys: ['shop_id'])\n\n  def perform(params)\n    # Logic \n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">ExpensiveIdempotentSyncJob</span> &lt; <span class=\"pl-v\">ActiveJob</span>\n  <span class=\"pl-c\"># This job syncs the data of this shop with an external service.</span>\n  <span class=\"pl-c\"># Since it is expensive, we want only one sync running at a time for each shop.</span>\n  <span class=\"pl-c\"># We need to enqueue this job whenever something changes that requires syncing.</span>\n  <span class=\"pl-c\"># However, if there is already an ExpensiveSyncJob in the queue, that job will sync all the changes made</span>\n  <span class=\"pl-c\"># before it starts running, so there is no need to enqueue duplicates.</span>\n  <span class=\"pl-en\">concurrency</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">limit</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-pds\">enqueue</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">perform</span>: <span class=\"pl-c1\">1</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">keys</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'shop_id'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">params</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\"># Logic </span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p dir=\"auto\"><strong><code class=\"notranslate\">ActiveJob</code> only care about the concurrency at the <code class=\"notranslate\">enqueue</code> (EndToEnd and EnqueueLimit) steps for the <code class=\"notranslate\">perform</code> cases (PerformLimit and BoundedStages) is up to the job adapters to implement it internally. So the adapters can decide to add the functionality or not ðŸ˜„</strong></p>\n<h3 dir=\"auto\">Other Information</h3>\n<p dir=\"auto\">The <code class=\"notranslate\">timeout</code> option allows specifying for how long a job can hold a concurrency ticket.</p>\n<p dir=\"auto\">At Shopify, we allow other API options like <code class=\"notranslate\">perform_delay</code> which configures the delay in which the job is placed back in the delayed queue when the <code class=\"notranslate\">PerformLimit</code> is reached.</p>\n<p dir=\"auto\">Here is an example of the API in use in one of our jobs:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"concurrency(limit: { perform: 8, perform_delay: 300 }, keys: ['task_name'])\"><pre class=\"notranslate\"><code class=\"notranslate\">concurrency(limit: { perform: 8, perform_delay: 300 }, keys: ['task_name'])\n</code></pre></div>",
            "url": "https://github.com/rails/rails/pull/40337",
            "title": "Add concurrency to ActiveJob",
            "date_modified": "2023-12-23T23:07:32.000Z",
            "date_published": "2020-10-05T18:27:44.000Z",
            "author": {
                "name": "GustavoCaso",
                "url": "https://github.com/GustavoCaso"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/14981592?u=11406fb0121b15a93b3305388377a57b4d9c96f9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Or rather, what they could mean. What to do with priority numbers is up to the adapter implementation.</p>\n<h3 dir=\"auto\">Detail</h3>\n<p dir=\"auto\">All adapters that support priority and I know of treat lower priority as more urgent:</p>\n<ul dir=\"auto\">\n<li>Backburner: <a href=\"https://github.com/nesquena/backburner?tab=readme-ov-file#enqueuing-jobs\">https://github.com/nesquena/backburner?tab=readme-ov-file#enqueuing-jobs</a></li>\n<li>Delayed Job: <a href=\"https://github.com/collectiveidea/delayed_job?tab=readme-ov-file#parameters\">https://github.com/collectiveidea/delayed_job?tab=readme-ov-file#parameters</a></li>\n<li>Que: <a href=\"https://github.com/que-rb/que?tab=readme-ov-file#usage\">https://github.com/que-rb/que?tab=readme-ov-file#usage</a></li>\n<li>SolidQueue: <a href=\"https://github.com/rails/solid_queue?tab=readme-ov-file#queue-order-and-priorities\">https://github.com/rails/solid_queue?tab=readme-ov-file#queue-order-and-priorities</a></li>\n<li>GoodJob (in v4): <a href=\"https://github.com/bensheldon/good_job/?tab=readme-ov-file#job-priority\">https://github.com/bensheldon/good_job/?tab=readme-ov-file#job-priority</a></li>\n</ul>\n<p dir=\"auto\">The example from this guide makes the same assumption: A video from a premium owner gets priority 0 while others \"only\" get 10.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/14981592/333726707-f6941981-e546-47bf-a91b-52cf18ceb9ec.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjExNzUyNjgsIm5iZiI6MTcyMTE3NDk2OCwicGF0aCI6Ii8xNDk4MTU5Mi8zMzM3MjY3MDctZjY5NDE5ODEtZTU0Ni00N2JmLWE5MWItNTJjZjE4Y2ViOWVjLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MTclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzE3VDAwMDkyOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWNjN2MyMjZiZThjYTQ4YWFkMGRjOWE3YmE0YzcyMWNmNzkyZTY5Y2IzOTliZTkzODk3NzRiZWMyZjkzOWE5MzYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.w_yL_pkANLozUcZuU-P1SsuZ4MrHg2guA_CqOK83u9M\"><img src=\"https://private-user-images.githubusercontent.com/14981592/333726707-f6941981-e546-47bf-a91b-52cf18ceb9ec.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjExNzUyNjgsIm5iZiI6MTcyMTE3NDk2OCwicGF0aCI6Ii8xNDk4MTU5Mi8zMzM3MjY3MDctZjY5NDE5ODEtZTU0Ni00N2JmLWE5MWItNTJjZjE4Y2ViOWVjLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MTclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzE3VDAwMDkyOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWNjN2MyMjZiZThjYTQ4YWFkMGRjOWE3YmE0YzcyMWNmNzkyZTY5Y2IzOTliZTkzODk3NzRiZWMyZjkzOWE5MzYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.w_yL_pkANLozUcZuU-P1SsuZ4MrHg2guA_CqOK83u9M\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">There is also this snippet in source which makes a rather clear claim:</p>\n<p dir=\"auto\"></p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/rails/rails/blob/ad41f711ced5fdef9fda2e89e8c7bb84570285c6/activejob/lib/active_job/core.rb#L24-L25\">rails/activejob/lib/active_job/core.rb</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 24 to 25\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/rails/rails/commit/ad41f711ced5fdef9fda2e89e8c7bb84570285c6\">ad41f71</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L24\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"24\"></td>\n          <td id=\"LC24\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"># Priority that the job will have (lower is more priority).</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L25\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"25\"></td>\n          <td id=\"LC25\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-en\">attr_writer</span> <span class=\"pl-pds\">:priority</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">I don't think that's entirely correct given that adapters can just do whatever they want (it's the only reference I actually managed find about what you're supposed to do though). Case in point GoodJob which currently implements higher priority number = more urgent unless explicitly opted into the new beheaviour.</p>\n<h3 dir=\"auto\">Checklist</h3>\n<p dir=\"auto\">Before submitting the PR make sure the following are checked:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: <code class=\"notranslate\">[Fix #issue-number]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tests are added or updated if you fix a bug or add a feature.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.</li>\n</ul>",
            "url": "https://github.com/rails/rails/pull/51912",
            "title": "Document what higher/lower priority numbers mean in ActiveJob guide [ci skip]",
            "date_modified": "2024-05-25T01:11:42.000Z",
            "date_published": "2024-05-24T20:20:24.000Z",
            "author": {
                "name": "Earlopain",
                "url": "https://github.com/Earlopain"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/204146?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Issue</h3>\n<p dir=\"auto\">The <code class=\"notranslate\">retry_job</code> method on ActiveJob jobs is basically a wrapper for <code class=\"notranslate\">enqueue</code>. Enqueue for Sidekiq just calls the factory for wrapping the ActiveJob job in a Sidekiq JobWrapper. (See<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/rails/rails/blob/babad404a9ae563fff7aa624859845772a4de4b6/activejob/lib/active_job/queue_adapters/sidekiq_adapter.rb#L22\">rails/activejob/lib/active_job/queue_adapters/sidekiq_adapter.rb</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 22\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/rails/rails/commit/babad404a9ae563fff7aa624859845772a4de4b6\">babad40</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L22\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"22\"></td>\n          <td id=\"LC22\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-s1\">job</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">provider_job_id</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">JobWrapper</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n).<p></p>\n<p dir=\"auto\">The issue is that when that happens, it is effectively a completely new Sidekiq job. Several of the attributes of the originating ActiveJob instance get passed into a <code class=\"notranslate\">set</code> on that Sidekiq job, but the provider_job_id is not one of them.</p>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\"><code class=\"notranslate\">retry_job</code> should result in the job having the same <code class=\"notranslate\">provider_job_id</code> as it did before the retry.</p>\n<h3 dir=\"auto\">Actual behavior</h3>\n<p dir=\"auto\">'retry_job' results in a change to the <code class=\"notranslate\">provider_job_id</code> every time.</p>\n<h3 dir=\"auto\">System configuration</h3>\n<p dir=\"auto\"><strong>Rails version</strong>:<br>\n7.1.2</p>\n<p dir=\"auto\"><strong>Ruby version</strong>:<br>\n3.2.2</p>",
            "url": "https://github.com/rails/rails/issues/51003",
            "title": "Sidekiq ActiveJob adapter resets provider_job_id on with retry_job",
            "date_modified": "2024-05-16T02:09:32.000Z",
            "date_published": "2024-02-07T17:38:09.000Z",
            "author": {
                "name": "nhorton",
                "url": "https://github.com/nhorton"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19192189?u=dd60737844a9db7f1475bab21fc3e5258a405e15&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Ref: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"170383343\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/26103\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/26103/hovercard\" href=\"https://github.com/rails/rails/pull/26103\">#26103</a><br>\nRef: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2222441259\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/51474\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/51474/hovercard\" href=\"https://github.com/rails/rails/pull/51474\">#51474</a></p>\n<p dir=\"auto\">A fairly common mistake with Rails is to enqueue a job from inside a transaction, with a record as argumemnt, which then lead to a <code class=\"notranslate\">RecordNotFound</code> error when picked up by the queue.</p>\n<p dir=\"auto\">This is even one of the arguments advanced for job runners backed by the database such as <code class=\"notranslate\">solid_queue</code>, <code class=\"notranslate\">delayed_job</code> or <code class=\"notranslate\">good_job</code>.</p>\n<p dir=\"auto\">But relying on this is undesirable in my opinion as it makes the Active Job abstraction leaky, and if in the future you need to migrate to another backend or even just move the queue to a separate database, you may experience a lot of race conditions of the sort.</p>\n<p dir=\"auto\">To resolve this problem globally, we can make Active Job optionally transaction aware, and automatically defer job queueing to <code class=\"notranslate\">after_commit</code>.</p>",
            "url": "https://github.com/rails/rails/pull/51426",
            "title": "Automatically delay Active Job enqueues to after commit",
            "date_modified": "2024-05-31T17:40:35.000Z",
            "date_published": "2024-03-26T14:58:46.000Z",
            "author": {
                "name": "casperisfine",
                "url": "https://github.com/casperisfine"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1966473?u=fe117732163d3610f051fca80df4e04c1b91335d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Overview</h2>\n<p dir=\"auto\">Add documentation related to <code class=\"notranslate\">perform_all_later</code> for bulk enqueuing jobs.</p>\n<h2 dir=\"auto\">Testing</h2>\n<p dir=\"auto\">Tested the new method in-app using sidekiq locally. Also tested documentation by running <code class=\"notranslate\">guides:generate</code>, <code class=\"notranslate\">guides:validate</code> and <code class=\"notranslate\">guides:lint</code> locally.</p>",
            "url": "https://github.com/rails/rails/pull/51004",
            "title": "[RF DOCS] Add documentation for `perform_all_later` to Active Job Basics guide [ci-skip]",
            "date_modified": "2024-02-19T16:56:15.000Z",
            "date_published": "2024-02-07T19:27:15.000Z",
            "author": {
                "name": "bhumi1102",
                "url": "https://github.com/bhumi1102"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/94129?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">On latest main, tests for an application of mine reliably stall locally and in CI. Sometimes warnings like the following are printed:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"WARNING:  there is already a transaction in progress\nmessage type 0x43 arrived from server while idle\nmessage type 0x5a arrived from server while idle\"><pre class=\"notranslate\"><code class=\"notranslate\">WARNING:  there is already a transaction in progress\nmessage type 0x43 arrived from server while idle\nmessage type 0x5a arrived from server while idle\n</code></pre></div>\n<p dir=\"auto\">Environment:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">The app uses a single Postgres DB and ARâ€™s Postgres adapter.</p>\n</li>\n<li>\n<p dir=\"auto\">It uses RSpec and FactoryBot, not Minitest or AR fixtures.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"rspec-core (3.12.0)\n  rspec-support (~&gt; 3.12.0)\nrspec-expectations (3.12.0)\n  diff-lcs (&gt;= 1.2.0, &lt; 2.0)\n  rspec-support (~&gt; 3.12.0)\nrspec-mocks (3.12.0)\n  diff-lcs (&gt;= 1.2.0, &lt; 2.0)\n  rspec-support (~&gt; 3.12.0)\nrspec-rails (6.0.1)\n  actionpack (&gt;= 6.1)\n  activesupport (&gt;= 6.1)\n  railties (&gt;= 6.1)\n  rspec-core (~&gt; 3.11)\n  rspec-expectations (~&gt; 3.11)\n  rspec-mocks (~&gt; 3.11)\n  rspec-support (~&gt; 3.11)\nrspec-support (3.12.0)\"><pre class=\"notranslate\"><code class=\"notranslate\">rspec-core (3.12.0)\n  rspec-support (~&gt; 3.12.0)\nrspec-expectations (3.12.0)\n  diff-lcs (&gt;= 1.2.0, &lt; 2.0)\n  rspec-support (~&gt; 3.12.0)\nrspec-mocks (3.12.0)\n  diff-lcs (&gt;= 1.2.0, &lt; 2.0)\n  rspec-support (~&gt; 3.12.0)\nrspec-rails (6.0.1)\n  actionpack (&gt;= 6.1)\n  activesupport (&gt;= 6.1)\n  railties (&gt;= 6.1)\n  rspec-core (~&gt; 3.11)\n  rspec-expectations (~&gt; 3.11)\n  rspec-mocks (~&gt; 3.11)\n  rspec-support (~&gt; 3.11)\nrspec-support (3.12.0)\n</code></pre></div>\n</li>\n<li>\n<p dir=\"auto\">Itâ€™s on Ruby 3.1.3.</p>\n</li>\n</ul>\n<p dir=\"auto\">A <code class=\"notranslate\">git bisect</code> pointed to <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/rails/rails/commit/1a2ca1920c62abdd08c809df1fa98fe0acf14bc3/hovercard\" href=\"https://github.com/rails/rails/commit/1a2ca1920c62abdd08c809df1fa98fe0acf14bc3\"><tt>1a2ca19</tt></a> (cc <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/byroot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/byroot\">@byroot</a>). That change does seem relevant, but I havenâ€™t been able to reproduce the issue in a minimal app yet. Iâ€™ve tried with both Minitest and RSpec.</p>\n<p dir=\"auto\">The tests usually stall in around the same place with the same seed, but not <em>exactly</em> the same place. And I looked at two stalled runs with different seeds that didnâ€™t run any common tests before their stalls.</p>\n<p dir=\"auto\">This has been difficult to pin down so far but I will keep looking.</p>",
            "url": "https://github.com/rails/rails/issues/46797",
            "title": "Active Job async adapter may use connections without a lease",
            "date_modified": "2024-06-06T16:57:27.000Z",
            "date_published": "2022-12-23T04:15:25.000Z",
            "author": {
                "name": "georgeclaghorn",
                "url": "https://github.com/georgeclaghorn"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19192189?u=dd60737844a9db7f1475bab21fc3e5258a405e15&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Extracted from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2088694143\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/50793\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/50793/hovercard\" href=\"https://github.com/rails/rails/pull/50793\">#50793</a></p>\n<p dir=\"auto\">The leased connection is yielded, and for the duration of the block, any call to <code class=\"notranslate\">ActiveRecord::Base.connection</code> will yield that same connection.</p>\n<p dir=\"auto\">This is useful to perform a few database operations without causing a connection to be leased for the entire duration of the request or job.</p>",
            "url": "https://github.com/rails/rails/pull/51083",
            "title": "Add `ActiveRecord::Base.with_connection` as a shortcut",
            "date_modified": "2024-02-21T15:25:00.000Z",
            "date_published": "2024-02-14T12:58:01.000Z",
            "author": {
                "name": "casperisfine",
                "url": "https://github.com/casperisfine"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/22556?u=6866d98eecfb340c80d752c00f627efe41ca267f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">There is a race condition in SchemaCache when multiple threads attempt to load schema data from the database in parallel. This results in a variety of exceptions and occasional segfaults, typically just after launch when schema info is not yet in memory.</p>\n<p dir=\"auto\">This PR improves the thread safety of ConnectionPool's schema_cache instance by making <code class=\"notranslate\">schema_cache.connection</code> a thread-local variable.</p>\n<details>\n<summary>Example errors</summary>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# (1)\nNoMethodError: undefined method `map_types!' for nil:NilClass\n  conn.async_exec(sql).map_types!(@type_map_for_results).values\n                      ^^^^^^^^^^^\nin gems/rails-dce7c1cd7c01/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:18:in `block (2 levels) in query'\n\n# (2)\nActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  zero-length delimited identifier at or near &quot;&quot;&quot;&quot;\n  LINE 1: ...M &quot;good_job_processes&quot; WHERE &quot;good_job_processes&quot;.&quot;&quot; IN (SEL...\n                                                               ^\nin gems/rails-dce7c1cd7c01/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:838:in `exec_params'\n# (This one seems to reflect a corrupted internal cache of the field's column name, and requires a manual app restart.)\n\n# (3)\nActiveRecord::StatementInvalid: PG::UnableToSend: message contents do not agree with length in message type &quot;Z&quot;\nin gems/rails-d247f491a4e4/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:18:in `exec'\n\n# (4)\nNoMethodError: undefined method `clear' for nil:NilClass\n  result.clear\n        ^^^^^^\nin gems/rails-13783f36ad6c/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:825:in `ensure in execute_and_clear'\n\n# (5)\nmessage type 0x31 arrived from server while idle\nmessage type 0x32 arrived from server while idle\nmessage type 0x6e arrived from server while idle\nmessage type 0x43 arrived from server while idle\nmessage type 0x5a arrived from server while idle\n\n# (6)\nruby(35954,0x700002fc8000) malloc: *** error for object 0x600003fa4fc0: pointer being freed was not allocated\nruby(35954,0x700002fc8000) malloc: *** set a breakpoint in malloc_error_break to debug\nAbort trap: 6\n\n# (7)\ngems/rails-dce7c1cd7c01/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:18: [BUG] Segmentation fault at 0x0000000000000488\"><pre class=\"notranslate\"><code class=\"notranslate\"># (1)\nNoMethodError: undefined method `map_types!' for nil:NilClass\n  conn.async_exec(sql).map_types!(@type_map_for_results).values\n                      ^^^^^^^^^^^\nin gems/rails-dce7c1cd7c01/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:18:in `block (2 levels) in query'\n\n# (2)\nActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  zero-length delimited identifier at or near \"\"\"\"\n  LINE 1: ...M \"good_job_processes\" WHERE \"good_job_processes\".\"\" IN (SEL...\n                                                               ^\nin gems/rails-dce7c1cd7c01/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:838:in `exec_params'\n# (This one seems to reflect a corrupted internal cache of the field's column name, and requires a manual app restart.)\n\n# (3)\nActiveRecord::StatementInvalid: PG::UnableToSend: message contents do not agree with length in message type \"Z\"\nin gems/rails-d247f491a4e4/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:18:in `exec'\n\n# (4)\nNoMethodError: undefined method `clear' for nil:NilClass\n  result.clear\n        ^^^^^^\nin gems/rails-13783f36ad6c/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:825:in `ensure in execute_and_clear'\n\n# (5)\nmessage type 0x31 arrived from server while idle\nmessage type 0x32 arrived from server while idle\nmessage type 0x6e arrived from server while idle\nmessage type 0x43 arrived from server while idle\nmessage type 0x5a arrived from server while idle\n\n# (6)\nruby(35954,0x700002fc8000) malloc: *** error for object 0x600003fa4fc0: pointer being freed was not allocated\nruby(35954,0x700002fc8000) malloc: *** set a breakpoint in malloc_error_break to debug\nAbort trap: 6\n\n# (7)\ngems/rails-dce7c1cd7c01/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:18: [BUG] Segmentation fault at 0x0000000000000488\n</code></pre></div>\n</details>\n<h3 dir=\"auto\">Background</h3>\n<p dir=\"auto\">Each <code class=\"notranslate\">ConnectionPool</code> / <code class=\"notranslate\">PoolConfig</code> holds a single, shared <code class=\"notranslate\">schema_cache</code> instance (ConnectionPool delegates schema_cache to pool_config). Because pools can be shared across threads, this implicitly shares <code class=\"notranslate\">pool.schema_cache</code> across threads as well.</p>\n<p dir=\"auto\"><code class=\"notranslate\">SchemaCache</code> maintains an internal copy of the <code class=\"notranslate\">connection</code> to use for schema-related queries to the DB. Since SchemaCache is shared across threads, this copy of <code class=\"notranslate\">connection</code> also becomes shared.</p>\n<p dir=\"auto\">When <code class=\"notranslate\">connection.schema_cache</code> is called, it first assigns <code class=\"notranslate\">schema_cache.connection = connection</code>. If two threads attempt to utilize <code class=\"notranslate\">schema_cache</code> in parallel, <code class=\"notranslate\">schema_cache.connection=</code> is called twice, once for each thread. The second write clobbers the first, giving rise to a lovely race condition: if the first thread makes any further DB queries, it is now suddenly using the second thread's connection, quite possibly in parallel to the second thread.</p>\n<p dir=\"auto\">This appears to have been an issue for a while, possibly since SchemaCache was made global to ConnectionPools (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"450947594\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/36371\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/36371/hovercard\" href=\"https://github.com/rails/rails/pull/36371\">#36371</a>). However, synchronization inside <code class=\"notranslate\">AbstractAdapter#with_raw_connection</code> largely compensated for it.</p>\n<p dir=\"auto\">Now that such synchronization has largely been turned into <code class=\"notranslate\">NullLock</code> (in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1454896644\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/46519\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/46519/hovercard\" href=\"https://github.com/rails/rails/pull/46519\">#46519</a>), that protection is gone and this race condition is somewhat easier to trigger.</p>\n<h3 dir=\"auto\">Context</h3>\n<p dir=\"auto\">I experienced the issue with GoodJob (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1533499111\" data-permission-text=\"Title is private\" data-url=\"https://github.com/bensheldon/good_job/issues/796\" data-hovercard-type=\"issue\" data-hovercard-url=\"/bensheldon/good_job/issues/796/hovercard\" href=\"https://github.com/bensheldon/good_job/issues/796\">bensheldon/good_job#796</a>) as it fires up multiple threads on start which all make immediate schema related queries to the DB.</p>\n<p dir=\"auto\">There's also an aging PR (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"571168840\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/38577\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/38577/hovercard\" href=\"https://github.com/rails/rails/pull/38577\">#38577</a>) indicating a similar problem when using Sidekiq.</p>\n<h3 dir=\"auto\">Proposed change</h3>\n<p dir=\"auto\">This PR changes <code class=\"notranslate\">SchemaCache#connection</code> to become thread-local. This avoids having to make farther reaching changes, which was one of the concerns raised in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"571168840\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/38577\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/38577/hovercard\" href=\"https://github.com/rails/rails/pull/38577\">#38577</a>.</p>\n<h3 dir=\"auto\">Alternatives</h3>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Make <code class=\"notranslate\">PoolConfig#schema_cache</code> thread-local instead. Unfortunately, this would make SchemaCache itself per-thread, effectively unwinding <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"450947594\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/36371\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/36371/hovercard\" href=\"https://github.com/rails/rails/pull/36371\">#36371</a>.</p>\n</li>\n<li>\n<p dir=\"auto\">Cause <code class=\"notranslate\">SchemaCache#connection</code> to checkout its own connection from the associated pool. This avoids thread-local vars, but would require additional DB connections. The checkout/checkin cycle might require API changes as well.</p>\n</li>\n<li>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"571168840\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/38577\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/38577/hovercard\" href=\"https://github.com/rails/rails/pull/38577\">#38577</a> also explored other options.</p>\n</li>\n</ol>\n<h3 dir=\"auto\">Checklist</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: <code class=\"notranslate\">[Fix #issue-number]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Tests are added or updated if you fix a bug or add a feature.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.</li>\n</ul>\n<p dir=\"auto\">cc <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/byroot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/byroot\">@byroot</a> <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/eileencodes/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eileencodes\">@eileencodes</a> <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/matthewd/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/matthewd\">@matthewd</a></p>\n<p dir=\"auto\"><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #796.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1533499111\" data-permission-text=\"Title is private\" data-url=\"https://github.com/bensheldon/good_job/issues/796\" data-hovercard-type=\"issue\" data-hovercard-url=\"/bensheldon/good_job/issues/796/hovercard\" href=\"https://github.com/bensheldon/good_job/issues/796\">bensheldon/good_job#796</a><br>\nReplaces <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"571168840\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/38577\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/38577/hovercard\" href=\"https://github.com/rails/rails/pull/38577\">#38577</a><br>\nPotentially related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1508859778\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/46797\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rails/rails/issues/46797/hovercard\" href=\"https://github.com/rails/rails/issues/46797\">#46797</a></p>",
            "url": "https://github.com/rails/rails/pull/47582",
            "title": "Make SchemaCache#connection thread-safe",
            "date_modified": "2024-04-01T07:59:48.000Z",
            "date_published": "2023-03-05T18:28:11.000Z",
            "author": {
                "name": "zarqman",
                "url": "https://github.com/zarqman"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19492947?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">There is presently no clean way of telling a caller of <code class=\"notranslate\">perform_later</code><br>\nthe reason why a job failed to enqueue. When the job is enqueued<br>\nsuccessfully, the job object itself is returned, but when the job can<br>\nnot be enqueued, only <code class=\"notranslate\">false</code> is returned. This does not allow callers<br>\nto distinguish between classes of failures.</p>\n<p dir=\"auto\">One important class of failures is when the job backend experiences a<br>\nnetwork partition when communicating with its underlying datastore. It<br>\nis entirely possible for that network partition to recover and as such,<br>\ncode attempting to enqueue a job may wish to take action to reenqueue<br>\nthat job after a brief delay. This is distinguished from the class of<br>\nfailures where due a business rule defined in a callback in the<br>\napplication, a job fails to enqueue and should not be retried.</p>\n<p dir=\"auto\">This PR changes the following:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Allows a block to be passed to the <code class=\"notranslate\">perform_later</code> method. After the<br>\n<code class=\"notranslate\">enqueue</code> method is executed, but before the result is returned, the<br>\njob will be yielded to the block. This allows the code invoking the<br>\n<code class=\"notranslate\">perform_later</code> method to inspect the job object, even in failure<br>\nscenarios.</p>\n</li>\n<li>\n<p dir=\"auto\">Adds an exception <code class=\"notranslate\">EnqueueError</code> which job adapters can raise if they<br>\ndetect a problem specific to their underlying implementation or<br>\ninfrastructure during the enqueue process.</p>\n</li>\n<li>\n<p dir=\"auto\">Adds two properties to the job base class: <code class=\"notranslate\">successfully_enqueued</code> and<br>\n<code class=\"notranslate\">enqueue_error</code>. <code class=\"notranslate\">enqueue_error</code> will be populated by the <code class=\"notranslate\">enqueue</code><br>\nmethod if it rescues an <code class=\"notranslate\">EnqueueError</code> raised by the job backend.<br>\n<code class=\"notranslate\">successfully_enqueued</code> will be true if the job is not rejected by<br>\ncallbacks and does not cause the job backend to raise an<br>\n<code class=\"notranslate\">EnqueueError</code> and will be <code class=\"notranslate\">false</code> otherwise.</p>\n</li>\n</ul>\n<p dir=\"auto\">This will allow developers to do something like the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MyJob.perform_later do |job|\n  unless job.successfully_enqueued?\n    if job.enqueue_error&amp;.message == &quot;Redis was unavailable&quot;\n      # invoke some code that will retry the job after a delay\n    end\n  end\nend\"><pre class=\"notranslate\"><code class=\"notranslate\">MyJob.perform_later do |job|\n  unless job.successfully_enqueued?\n    if job.enqueue_error&amp;.message == \"Redis was unavailable\"\n      # invoke some code that will retry the job after a delay\n    end\n  end\nend\n</code></pre></div>\n<p dir=\"auto\">Documentation changes/additions would still be required</p>",
            "url": "https://github.com/rails/rails/pull/41191",
            "title": "Communicate enqueue failures to callers of perform_later",
            "date_modified": "2023-04-05T01:10:29.000Z",
            "date_published": "2021-01-20T18:20:12.000Z",
            "author": {
                "name": "djmortonShopify",
                "url": "https://github.com/djmortonShopify"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5657035?u=48dc5950e98b199e1ed1e8c5c3f1e4bfd2b39691&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Follow up to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1467016765\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/46603\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/46603/hovercard\" href=\"https://github.com/rails/rails/pull/46603\">#46603</a>.</p>\n<p dir=\"auto\">When working on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1650754219\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/47839\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/47839/hovercard\" href=\"https://github.com/rails/rails/pull/47839\">#47839</a>, I noticed that ActiveJob does not print any logs when <code class=\"notranslate\">perform_all_later</code> is called, compared to other methods, like <code class=\"notranslate\">perform_later</code>.</p>\n<p dir=\"auto\">The log lines look like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# When all jobs were enqueued successfully\nEnqueued 3 jobs to Sidekiq (2 TestJob, 1 AnotherJob)\n\n# When there are enqueued and not enqueued jobs\nEnqueued 3 jobs to Sidekiq (2 TestJob, 1 AnotherJob). Failed enqueuing 1 job\n\n# When all jobs failed enqueuing\nFailed enqueuing 2 jobs to Sidekiq \"><pre class=\"notranslate\"><code class=\"notranslate\"># When all jobs were enqueued successfully\nEnqueued 3 jobs to Sidekiq (2 TestJob, 1 AnotherJob)\n\n# When there are enqueued and not enqueued jobs\nEnqueued 3 jobs to Sidekiq (2 TestJob, 1 AnotherJob). Failed enqueuing 1 job\n\n# When all jobs failed enqueuing\nFailed enqueuing 2 jobs to Sidekiq \n</code></pre></div>\n<p dir=\"auto\">I am thinking if there is a need for more detailed log lines, like stating what jobs failed enqueuing, for example.</p>",
            "url": "https://github.com/rails/rails/pull/47844",
            "title": "[ActiveJob] Add logging for `enqueue_all`",
            "date_modified": "2023-04-04T21:46:14.000Z",
            "date_published": "2023-04-02T18:38:26.000Z",
            "author": {
                "name": "fatkodima",
                "url": "https://github.com/fatkodima"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5864726?u=e92ece760a4f05c73e36340e2e4ea3abdfc7e128&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Motivation / Background</h3>\n<p dir=\"auto\">Sidekiq has a useful optimisation called <code class=\"notranslate\">push_bulk</code> that enqueues many jobs at once, eliminating the repeated Redis roundtrips. However, this feature is not exposed through Active Job, so it only works for <code class=\"notranslate\">Sidekiq::Worker</code> jobs. This adds a barrier to Active Job adoption for apps that rely on this feature. It also makes it harder for other queue adapters to implement similar functionality, as they then have to take care of serialization, callbacks, etc. themselves.</p>\n<h3 dir=\"auto\">Detail</h3>\n<p dir=\"auto\">This PR adds <code class=\"notranslate\">ActiveJob.perform_all_later([&lt;job 1&gt;, &lt;job2&gt;])</code>, backed by Sidekiq's <code class=\"notranslate\">push_bulk</code> and with a fallback to enqueuing serially if the queue adapter does not support bulk enqueue.</p>\n<h4 dir=\"auto\">Arguments</h4>\n<p dir=\"auto\">It's hard to support the full diversity of ways a Ruby method can be called with a simple array. In particular, jobs with a mix of positional and keyword arguments are difficult to distinguish from jobs with positional arguments that include a hash. Sidekiq gets around this by not supporting keyword arguments.</p>\n<p dir=\"auto\">While it is possible to support everything by treating the last hash in the array of arguments as keywords and requiring jobs with a hash as last positional argument to include an additional empty hash of keyword arguments, based on feedback on the PR, we chose to pass instantiated jobs, so we can let Ruby handle all these complexities.</p>\n<h4 dir=\"auto\">Delay</h4>\n<p dir=\"auto\">Passing in instantiated jobs also makes it easy for the user to specify delays for each job:</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"user_jobs = users.map.with_index do |user, user_index|\n  UserJob.new(user).set(wait: user_index.seconds)\nend\nActiveJob.perform_all_later(user_jobs)\"><pre class=\"notranslate\"><span class=\"pl-s1\">user_jobs</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">users</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">with_index</span> <span class=\"pl-k\">do</span> |<span class=\"pl-s1\">user</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">user_index</span>|\n  <span class=\"pl-v\">UserJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">wait</span>: <span class=\"pl-s1\">user_index</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">seconds</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">end</span>\n<span class=\"pl-v\">ActiveJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_all_later</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">user_jobs</span><span class=\"pl-kos\">)</span></pre></div>\n\n<h4 dir=\"auto\">Return value</h4>\n<p dir=\"auto\">The return value of <code class=\"notranslate\">perform_all_later</code> is limited by Sidekiq's current behaviour. <code class=\"notranslate\">push_bulk</code> returns the (provider) ids of all jobs that were successfully enqueued. This means that if we try to enqueue 2 jobs, we may get back a single id with no way of knowing which job it belongs to, so we can't even map it back to Active Job's job ids. I chose to return the number of successfully enqueued jobs, but it may be better to always return <code class=\"notranslate\">true</code> for now, so that we can more easily change it later? In an ideal world, I think the return value would be an array of either the job or <code class=\"notranslate\">false</code>, to mirror the return value of <code class=\"notranslate\">perform_later</code>.</p>\n<h4 dir=\"auto\">Callbacks</h4>\n<p dir=\"auto\">Based on feedback in this PR, <code class=\"notranslate\">perform_all_later</code> does not run any callbacks. This is in line with the Active Record bulk methods, so it shouldn't be too surprising to users and it is clearly stated in the documentation.</p>\n<p dir=\"auto\">There are several issues with running callbacks:</p>\n<ul dir=\"auto\">\n<li>I don't see a good way to run <code class=\"notranslate\">around_enqueue</code> callbacks for each job in a way that the callback begins before the job is enqueued and ends after. Running them another way breaks the assumptions and gives strange results, for instance for Active Job's own enqueue instrumentation.</li>\n<li>The callbacks run on individual jobs, so they can't take advantage of the bulk nature of this method. This could lead to N+1 queries and greatly slow down what is meant to be a performance optimization.</li>\n</ul>\n\n\n<h4 dir=\"auto\">Batching</h4>\n<p dir=\"auto\">Sidekiq recommends batches of no more than 1000 jobs, and their newer bulk API <code class=\"notranslate\">perform_bulk</code> will automatically break them up into batches of that size if you pass a larger array. As recommended batch sizes will vary between back-ends, I'm not sure if this should be something that Active Job handles as opposed to the adapter, although we could make it configurable. This is also easy to add later.</p>\n<h3 dir=\"auto\">Additional information</h3>\n<p dir=\"auto\">The performance benefit for 1000 jobs can be more than an order of magnitude:</p>\n<markdown-accessiblity-table><table role=\"table\">\n<thead>\n<tr>\n<th>Enqueue type</th>\n<th>Serial time (ms)</th>\n<th>Bulk time (ms)</th>\n<th>Speedup</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Raw Sidekiq</td>\n<td>2661</td>\n<td>119</td>\n<td>22x</td>\n</tr>\n<tr>\n<td>Active Job Sidekiq</td>\n<td>2853</td>\n<td>208</td>\n<td>14x</td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir=\"auto\">(Measured in a simple test app in our production environment.)</p>\n<p dir=\"auto\">See also <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"628430906\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/39499\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rails/rails/pull/39499/hovercard\" href=\"https://github.com/rails/rails/pull/39499\">#39499</a> which was a previous stab at this and where I stole the name from (ðŸ™‡ <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vinistock/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vinistock\">@vinistock</a>).</p>\n<h3 dir=\"auto\">Checklist</h3>\n<p dir=\"auto\">Before submitting the PR make sure the following are checked:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: <code class=\"notranslate\">[Fix #issue-number]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Tests are added or updated if you fix a bug or add a feature.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> CI is passing.</li>\n</ul>",
            "url": "https://github.com/rails/rails/pull/46603",
            "title": "Add `perform_all_later` to enqueue multiple jobs at once",
            "date_modified": "2023-02-14T08:15:57.000Z",
            "date_published": "2022-11-28T20:03:24.000Z",
            "author": {
                "name": "Mangara",
                "url": "https://github.com/Mangara"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/47554?u=7f919feee43d319ec01c7b135f4d1868a31bddc3&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\"><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #45434.\">Closes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1280838602\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/45434\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rails/rails/issues/45434/hovercard\" href=\"https://github.com/rails/rails/issues/45434\">#45434</a>.</p>\n<ul dir=\"auto\">\n<li>Removes the assignment of <code class=\"notranslate\">ActiveRecord::DestroyAssociationAsyncJob</code> from the ActiveJob Railtie.</li>\n<li>Avoids referencing the Job constants until <code class=\"notranslate\">ActiveSupport.on_load(:active_job)</code> has been triggered.</li>\n<li><del>Uses nested <code class=\"notranslate\">ActiveSupport.on_loads</code> which are ok, according to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1280838602\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rails/rails/issues/45434\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rails/rails/issues/45434/hovercard?comment_id=1164711433&amp;comment_type=issue_comment\" href=\"https://github.com/rails/rails/issues/45434#issuecomment-1164711433\">#45434 (comment)</a></del></li>\n<li>Deprecates <code class=\"notranslate\">ActiveRecord::ActiveJobRequiredError</code> and will either raise a <code class=\"notranslate\">NameError</code> (if the job class is unloadable) or a <code class=\"notranslate\">ActiveRecord::ConfigurationError</code> (if dependent: :destroy_async`  is declared on an association but there is no job class configured)</li>\n</ul>",
            "url": "https://github.com/rails/rails/pull/45476",
            "title": "Defer constant loading of `ActiveRecord::DestroyAssociationAsyncJob` via a String instead of a class constant",
            "date_modified": "2022-07-13T22:55:58.000Z",
            "date_published": "2022-06-28T00:35:53.000Z",
            "author": {
                "name": "bensheldon",
                "url": "https://github.com/bensheldon"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/474554?u=a02b1be665c890745d65404f43e4e86ea929ec34&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Steps to reproduce</h3>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"ActiveJob::Base.queue_adapter = :async\n\nclass MyJob &lt; ActiveJob::Base\n  queue_as :default\n\n  def perform\n    puts queue_name\n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-v\">ActiveJob</span>::<span class=\"pl-v\">Base</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">queue_adapter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-pds\">:async</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">MyJob</span> &lt; <span class=\"pl-v\">ActiveJob</span>::<span class=\"pl-v\">Base</span>\n  <span class=\"pl-en\">queue_as</span> <span class=\"pl-pds\">:default</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform</span>\n    <span class=\"pl-en\">puts</span> <span class=\"pl-en\">queue_name</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p dir=\"auto\">When using <code class=\"notranslate\">set().perform_now</code>, the options passed to <code class=\"notranslate\">set</code> are not retrievable in the job instance:</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&gt; MyJob.set(queue: :another_queue).perform_now\nPerforming MyJob (...) from Async(default) enqueued at\ndefault\nPerformed MyJob (...) from Async(default) in 0.29ms\"><pre class=\"notranslate\">&gt; <span class=\"pl-v\">MyJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">queue</span>: <span class=\"pl-pds\">:another_queue</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_now</span>\n<span class=\"pl-en\">Performing</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">from</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">default</span><span class=\"pl-kos\">)</span> <span class=\"pl-en\">enqueued</span> <span class=\"pl-en\">at</span>\n<span class=\"pl-en\">default</span>\n<span class=\"pl-v\">Performed</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">from</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">default</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">0.29</span><span class=\"pl-en\">ms</span></pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">The behavior is expected to be the same when using <code class=\"notranslate\">perform_now</code> or <code class=\"notranslate\">perform_later</code> on a configured job.</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&gt; MyJob.set(queue: :another_queue).perform_later\nEnqueued MyJob (...) to Async(another_queue)\nPerforming MyJob (...) from Async(another_queue) enqueued at 2021-10-05...\nanother_queue\nPerformed MyJob (...) from Async(another_queue) in 0.26ms\n\n&gt; MyJob.set(queue: :another_queue).perform_now\nPerforming MyJob (...) from Async(another_queue) enqueued at\nanother_queue\nPerformed MyJob (...) from Async(another_queue) in 0.29ms\"><pre class=\"notranslate\">&gt; <span class=\"pl-v\">MyJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">queue</span>: <span class=\"pl-pds\">:another_queue</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_later</span>\n<span class=\"pl-v\">Enqueued</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">to</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">another_queue</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-v\">Performing</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">from</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">another_queue</span><span class=\"pl-kos\">)</span> <span class=\"pl-en\">enqueued</span> <span class=\"pl-en\">at</span> <span class=\"pl-c1\">2021</span>-<span class=\"pl-c1\">10</span>-<span class=\"pl-c1\">05</span>...\n<span class=\"pl-en\">another_queue</span>\n<span class=\"pl-v\">Performed</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">from</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">another_queue</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">0.26</span><span class=\"pl-en\">ms</span>\n\n&gt; <span class=\"pl-v\">MyJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">queue</span>: <span class=\"pl-pds\">:another_queue</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_now</span>\n<span class=\"pl-v\">Performing</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">from</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">another_queue</span><span class=\"pl-kos\">)</span> <span class=\"pl-en\">enqueued</span> <span class=\"pl-en\">at</span>\n<span class=\"pl-en\">another_queue</span>\n<span class=\"pl-v\">Performed</span> <span class=\"pl-v\">MyJob</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span> <span class=\"pl-en\">from</span> <span class=\"pl-en\">Async</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">another_queue</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">0.29</span><span class=\"pl-en\">ms</span></pre></div>\n<p dir=\"auto\">It might seem useless because the job is performed synchronously, but it's not when building complex jobs flows, which is mixing <code class=\"notranslate\">perform_now</code> and<code class=\"notranslate\"> perform_later</code> methods, in the same given queue.</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class MyJob &lt; ActiveJob::Base\n  queue_as :default\n\n  def perform\n    if something_is_not_ready?\n      MyJob.set(queue: queue_name, wait: 1.minute).perform_later\n    else\n      ...\n      MyOtherJob.set(queue: queue_name).perform_now\n    end\n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">MyJob</span> &lt; <span class=\"pl-v\">ActiveJob</span>::<span class=\"pl-v\">Base</span>\n  <span class=\"pl-en\">queue_as</span> <span class=\"pl-pds\">:default</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-en\">something_is_not_ready?</span>\n      <span class=\"pl-v\">MyJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">queue</span>: <span class=\"pl-en\">queue_name</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">wait</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">minute</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_later</span>\n    <span class=\"pl-k\">else</span>\n      ...\n      <span class=\"pl-v\">MyOtherJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">queue</span>: <span class=\"pl-en\">queue_name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_now</span>\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<h3 dir=\"auto\">System configuration</h3>\n<p dir=\"auto\">Rails 6.1.4.1<br>\nAlso reproductible in master</p>\n<h3 dir=\"auto\">Solution proposal</h3>\n<p dir=\"auto\">I'll propose the following suggestion in a coming PR :</p>\n<div class=\"highlight highlight-source-ruby notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"module ActiveJob\n  class ConfiguredJob\n    ...\n\n    def perform_now(...)\n      instantiate(...).perform_now\n    end\n\n    def perform_later(...)\n      instantiate(...).enqueue\n    end\n\n    private\n\n    def instantiate(...)\n      job = @job_class.new(...)\n      self.class.configure(job, @options)\n    end\n\n    def self.configure(job, options = {})\n      job.scheduled_at = options[:wait].seconds.from_now.to_f if options[:wait]\n      job.scheduled_at = options[:wait_until].to_f if options[:wait_until]\n      job.queue_name   = self.class.queue_name_from_part(options[:queue]) if options[:queue]\n      job.priority     = options[:priority].to_i if options[:priority]\n      job      \n    end\n  end\n\n  module Enqueuing\n    def enqueue(options = {})\n      ActiveJob::ConfiguredJob.configure(self, options)\n      ...\n    end\n  end\nend\"><pre class=\"notranslate\"><span class=\"pl-k\">module</span> <span class=\"pl-v\">ActiveJob</span>\n  <span class=\"pl-k\">class</span> <span class=\"pl-v\">ConfiguredJob</span>\n    <span class=\"pl-kos\">.</span>..\n\n    <span class=\"pl-en\">def</span> <span class=\"pl-en\">perform_now</span><span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">instantiate</span><span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">perform_now</span>\n    <span class=\"pl-en\">end</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform_later</span><span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">instantiate</span><span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">enqueue</span>\n    <span class=\"pl-en\">end</span>\n\n    <span class=\"pl-k\">private</span>\n\n    <span class=\"pl-en\">def</span> <span class=\"pl-en\">instantiate</span><span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">job</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">@job_class</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span>...<span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">class</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">configure</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">job</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">@options</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">end</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-smi\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">configure</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">job</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">options</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">job</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">scheduled_at</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:wait</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">seconds</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">from_now</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">to_f</span> <span class=\"pl-en\">if</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:wait</span><span class=\"pl-kos\">]</span>\n      <span class=\"pl-en\">job</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">scheduled_at</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:wait_until</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">to_f</span> <span class=\"pl-en\">if</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:wait_until</span><span class=\"pl-kos\">]</span>\n      <span class=\"pl-en\">job</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">queue_name</span>   <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">class</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">queue_name_from_part</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:queue</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-en\">if</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:queue</span><span class=\"pl-kos\">]</span>\n      <span class=\"pl-en\">job</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">priority</span>     <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:priority</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">to_i</span> <span class=\"pl-en\">if</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\">:priority</span><span class=\"pl-kos\">]</span>\n      <span class=\"pl-en\">job</span>      \n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-en\">end</span>\n\n  <span class=\"pl-k\">module</span> <span class=\"pl-v\">Enqueuing</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">enqueue</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">options</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-v\">ActiveJob</span>::<span class=\"pl-v\">ConfiguredJob</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">configure</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">options</span><span class=\"pl-kos\">)</span>\n      ...\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-en\">end</span></pre></div>",
            "url": "https://github.com/rails/rails/issues/43376",
            "title": "ActiveJob::Base.set doesn't configure jobs when using perform_now",
            "date_modified": "2021-10-12T21:16:10.000Z",
            "date_published": "2021-10-05T09:20:51.000Z",
            "author": {
                "name": "inkstak",
                "url": "https://github.com/inkstak"
            }
        }
    ]
}